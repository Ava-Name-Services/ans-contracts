{
  "address": "0xdC0A84E0cC733C06CE408F4B9e4f8b10C9bF4D54",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract AggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0bfc2077f772e7f4526e7abeb90740258836c4a484559f2275d5b5f77c778e8a",
  "receipt": {
    "to": null,
    "from": "0x12A44052B3d37385C6aaF8b11A2327314d3C9E58",
    "contractAddress": "0xdC0A84E0cC733C06CE408F4B9e4f8b10C9bF4D54",
    "transactionIndex": 2,
    "gasUsed": "1097372",
    "logsBloom": "0x
    "blockHash": "0x6e07acc2ee110198a63c35c08f1bfe6c8936b268b29430e44723338a671873e4",
    "transactionHash": "0x0bfc2077f772e7f4526e7abeb90740258836c4a484559f2275d5b5f77c778e8a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 8940091,
        "transactionHash": "0x0bfc2077f772e7f4526e7abeb90740258836c4a484559f2275d5b5f77c778e8a",
        "address": "0xdC0A84E0cC733C06CE408F4B9e4f8b10C9bF4D54",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000012a44052b3d37385c6aaf8b11a2327314d3c9e58"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x6e07acc2ee110198a63c35c08f1bfe6c8936b268b29430e44723338a671873e4"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 8940091,
        "transactionHash": "0x0bfc2077f772e7f4526e7abeb90740258836c4a484559f2275d5b5f77c778e8a",
        "address": "0xdC0A84E0cC733C06CE408F4B9e4f8b10C9bF4D54",
        "topics": [
          "0x73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 4,
        "blockHash": "0x6e07acc2ee110198a63c35c08f1bfe6c8936b268b29430e44723338a671873e4"
      }
    ],
    "blockNumber": 8940091,
    "cumulativeGasUsed": "1253372",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcfA95eb1dF4642310d7b6e0354419CacAee190E1",
    [
      1
    ]
  ],
  "solcInputHash": "d732b441a7cbad0253643b1c07e7d8aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"The price of this renewal or registration, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOracle(address)\":{\"details\":\"Sets the price oracle address\",\"params\":{\"_usdOracle\":\"The address of the price oracle to use.\"}},\"setPrices(uint256[])\":{\"details\":\"Sets rent prices.\",\"params\":{\"_rentPrices\":\"The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Returns the latest price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StablePriceOracle.sol\":\"StablePriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ethregistrar/PriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface PriceOracle {\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return The price of this renewal or registration, in wei.\\n     */\\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\\n}\\n\",\"keccak256\":\"0xcfe3ee922e586ab7a723d10cf6b84299f0d2f94972669cf1e5de3eb8fc0ee2f8\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StablePriceOracle.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./PriceOracle.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n}\\n\\n\\n// StablePriceOracle sets a price in USD, based on an oracle.\\ncontract StablePriceOracle is Ownable, PriceOracle {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\\n    uint[] public rentPrices;\\n\\n    // Oracle address\\n    AggregatorInterface public usdOracle;\\n    AggregatorV3Interface internal priceFeed;\\n\\n\\n    event OracleChanged(address oracle);\\n\\n    event RentPriceChanged(uint[] prices);\\n\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 constant private ORACLE_ID = bytes4(keccak256(\\\"price(string,uint256,uint256)\\\") ^ keccak256(\\\"premium(string,uint256,uint256)\\\"));\\n\\n    constructor(AggregatorInterface _usdOracle, uint[] memory _rentPrices) {\\n        priceFeed = AggregatorV3Interface(0x5498BB86BC934c8D34FDA08E81D444153d0D06aD);\\n        usdOracle = _usdOracle;\\n        setPrices(_rentPrices);\\n    }\\n\\n        /**\\n     * Returns the latest price\\n     */\\n    function getLatestPrice() public view returns (int) {\\n        (\\n            /*uint80 roundID*/,\\n            int latestPrice,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return latestPrice;\\n    }\\n\\n    function price(string calldata name, uint expires, uint duration) external view override returns(uint) {\\n        uint len = name.strlen();\\n        if(len > rentPrices.length) {\\n            len = rentPrices.length;\\n        }\\n        require(len > 0);\\n        \\n        uint basePrice = rentPrices[len - 1].mul(duration);\\n        basePrice = basePrice.add(_premium(name, expires, duration));\\n\\n        return attoUSDToWei(basePrice);\\n    }\\n\\n    /**\\n     * @dev Sets rent prices.\\n     * @param _rentPrices The price array. Each element corresponds to a specific\\n     *                    name length; names longer than the length of the array\\n     *                    default to the price of the last element. Values are\\n     *                    in base price units, equal to one attodollar (1e-18\\n     *                    dollar) each.\\n     */\\n    function setPrices(uint[] memory _rentPrices) public onlyOwner {\\n        rentPrices = _rentPrices;\\n        emit RentPriceChanged(_rentPrices);\\n    }\\n\\n    /**\\n     * @dev Sets the price oracle address\\n     * @param _usdOracle The address of the price oracle to use.\\n     */\\n    function setOracle(AggregatorInterface _usdOracle) public onlyOwner {\\n        usdOracle = _usdOracle;\\n        emit OracleChanged(address(_usdOracle));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(string calldata name, uint expires, uint duration) external view returns(uint) {\\n        return attoUSDToWei(_premium(name, expires, duration));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(string memory name, uint expires, uint duration) virtual internal view returns(uint) {\\n        return 0;\\n    }\\n\\n    function attoUSDToWei(uint amount) internal view returns(uint) {\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\n        return amount.mul(1e8).div(ethPrice);\\n    }\\n\\n    function weiToAttoUSD(uint amount) internal view returns(uint) {\\n        uint ethPrice = uint(usdOracle.latestAnswer());\\n        return amount.mul(ethPrice).div(1e8);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xe62de5feea7394267b099d0a06d27c5f66956f7b254cb5aa235fa724f62720c1\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x48828eaf42494879c04f560e7b17a402d0a8922fc2047844c338776239fd5c80\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80637adbf97311610081578063a34e35961161005b578063a34e3596146101a1578063c8a4271f146101b4578063f2fde38b146101d457600080fd5b80637adbf973146101475780638da5cb5b1461015a5780638e15f4731461019957600080fd5b806350e9a715116100b257806350e9a71514610117578063715018a61461012a57806379cf92d31461013457600080fd5b806301ffc9a7146100ce57806306d5d0b6146100f6575b600080fd5b6100e16100dc366004610dab565b6101e7565b60405190151581526020015b60405180910390f35b610109610104366004610e7d565b610280565b6040519081526020016100ed565b610109610125366004610e03565b6102a1565b6101326103c9565b005b610132610142366004610ccd565b61045b565b610132610155366004610cb1565b61052a565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b61010961061e565b6101096101af366004610e03565b6106cc565b6002546101749073ffffffffffffffffffffffffffffffffffffffff1681565b6101326101e2366004610cb1565b610722565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061027a57507fffffffff0000000000000000000000000000000000000000000000000000000082167ff3a7928300000000000000000000000000000000000000000000000000000000145b92915050565b6001818154811061029057600080fd5b600091825260209091200154905081565b6000806102e386868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061085292505050565b6001549091508111156102f557506001545b6000811161030257600080fd5b60006103648460016103148186610fb6565b8154811061034b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154610a8090919063ffffffff16565b90506103b36103ac88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150610ab99050565b8290610ac2565b90506103be81610ade565b979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461044f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104596000610b9b565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610446565b80516104ef906001906020840190610c32565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df8160405161051f9190610ee4565b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610446565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe4189060200161051f565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561068957600080fd5b505afa15801561069d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190610e95565b509195945050505050565b600061071961071486868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250879150610ab99050565b610ade565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610446565b73ffffffffffffffffffffffffffffffffffffffff8116610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610446565b61084f81610b9b565b50565b8051600090819081905b80821015610a7757600085838151811061089f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f8000000000000000000000000000000000000000000000000000000000000000811015610902576108fb600184610f28565b9250610a64565b7fe0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610957576108fb600284610f28565b7ff0000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000821610156109ac576108fb600384610f28565b7ff8000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610a01576108fb600484610f28565b7ffc000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610a56576108fb600584610f28565b610a61600684610f28565b92505b5082610a6f81610fcd565b93505061085c565b50909392505050565b600082610a8f5750600061027a565b6000610a9b8385610f79565b905082610aa88583610f40565b14610ab257600080fd5b9392505050565b60009392505050565b600080610acf8385610f28565b905083811015610ab257600080fd5b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4957600080fd5b505afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b819190610deb565b9050610ab281610b95856305f5e100610a80565b90610c10565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808211610c1e57600080fd5b6000610c2a8385610f40565b949350505050565b828054828255906000526020600020908101928215610c6d579160200282015b82811115610c6d578251825591602001919060010190610c52565b50610c79929150610c7d565b5090565b5b80821115610c795760008155600101610c7e565b805169ffffffffffffffffffff81168114610cac57600080fd5b919050565b600060208284031215610cc2578081fd5b8135610ab281611064565b60006020808385031215610cdf578182fd5b823567ffffffffffffffff80821115610cf6578384fd5b818501915085601f830112610d09578384fd5b813581811115610d1b57610d1b611035565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610d5e57610d5e611035565b604052828152858101935084860182860187018a1015610d7c578788fd5b8795505b83861015610d9e578035855260019590950194938601938601610d80565b5098975050505050505050565b600060208284031215610dbc578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ab2578182fd5b600060208284031215610dfc578081fd5b5051919050565b60008060008060608587031215610e18578283fd5b843567ffffffffffffffff80821115610e2f578485fd5b818701915087601f830112610e42578485fd5b813581811115610e50578586fd5b886020828501011115610e61578586fd5b6020928301999098509187013596604001359550909350505050565b600060208284031215610e8e578081fd5b5035919050565b600080600080600060a08688031215610eac578081fd5b610eb586610c92565b9450602086015193506040860151925060608601519150610ed860808701610c92565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b81811015610f1c57835183529284019291840191600101610f00565b50909695505050505050565b60008219821115610f3b57610f3b611006565b500190565b600082610f74577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fb157610fb1611006565b500290565b600082821015610fc857610fc8611006565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fff57610fff611006565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461084f57600080fdfea264697066735822122094cfdd7afbc0e697820ccfd54f2474bb37077658e59351ba87f54e8a15aea99564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "The price of this renewal or registration, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOracle(address)": {
        "details": "Sets the price oracle address",
        "params": {
          "_usdOracle": "The address of the price oracle to use."
        }
      },
      "setPrices(uint256[])": {
        "details": "Sets rent prices.",
        "params": {
          "_rentPrices": "The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Returns the latest price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 591,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11516,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "rentPrices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11519,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "usdOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorInterface)11505"
      },
      {
        "astId": 11522,
        "contract": "contracts/ethregistrar/StablePriceOracle.sol:StablePriceOracle",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorInterface)11505": {
        "encoding": "inplace",
        "label": "contract AggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}